// This script handles interactions for the creator base template,
// including mode switching and active navigation link highlighting.
document.addEventListener('DOMContentLoaded', function() {
    // Loader element for mode switching
    const modeSwitchLoader = document.getElementById('mode-switch-loader');

    /**
     * Handles the visual feedback and redirection when switching to user mode.
     */
    function handleSwitchToUserMode() {
        // URL to redirect to when switching to user mode (e.g., user's main profile page)
        // The URL is dynamically generated by Django's {% url %} tag in the original template.
        // Since this is a static JS file, we'll need to ensure this URL is correctly passed
        // or handled if this function is to be kept generic.
        // For now, assuming the URL is available or will be handled by another mechanism if needed.
        // const targetUrl = "{% url 'AudioXApp:myprofile' %}"; // This Django tag won't work here.
        // A more robust way if this JS is truly static would be to have the URL in a data attribute
        // or find the link element and get its href.
        
        const myProfileLink = document.querySelector('a[href*="/my-profile/"]'); // A generic selector, adjust if needed
        const targetUrl = myProfileLink ? myProfileLink.href : "/"; // Fallback to home

        if (modeSwitchLoader) {
            modeSwitchLoader.classList.remove('hidden'); // Show the loader
            modeSwitchLoader.style.opacity = '1'; // Ensure opacity is set for transition
        }

        // Delay redirection to allow loader to be visible
        setTimeout(() => {
            window.location.href = targetUrl;
        }, 1500); 
    }

    // Event listener for the header switch button
    const headerSwitchBtn = document.getElementById('header-switch-normal-btn');
    if (headerSwitchBtn) {
        headerSwitchBtn.addEventListener('click', handleSwitchToUserMode);
    }

    // Event listener for the mobile switch button
    const mobileSwitchBtn = document.getElementById('mobile-switch-normal-btn');
    if (mobileSwitchBtn) {
        mobileSwitchBtn.addEventListener('click', handleSwitchToUserMode);
    }

    // --- Active Navigation Link Highlighting ---
    const currentPath = window.location.pathname; // Get the current URL path
    const topNavLinks = document.querySelectorAll('nav .top-nav-link'); // Desktop navigation links
    const mobileNavLinks = document.querySelectorAll('#mobile-menu a.mobile-nav-link'); // Mobile navigation links
    
    // URLs for comparison (these should ideally be passed from Django, e.g., via data attributes, if they are dynamic)
    // For static JS, these are hardcoded based on common patterns.
    const dashboardUrl = "/creator/dashboard/"; // Assuming this is the structure
    const withdrawalListUrl = "/creator/request-withdrawal-list/";
    const withdrawalAccountUrl = "/creator/manage-withdrawal-accounts/";
    const myAudiobooksUrl = "/creator/my-audiobooks/";
    const myEarningsUrl = "/creator/my-earnings/";
    const uploadAudiobookUrl = "/creator/upload-audiobook/"; // Added for completeness
    const profileUpdateUrl = "/creator/profile/update/"; // Added for completeness
    const manageAudiobookDetailPattern = /^\/creator\/manage-upload\/[\w-]+?\/?$/; // Regex for specific audiobook management pages

    let activeSet = false; // Flag to check if an active link was set

    /**
     * Determines if a navigation link should be considered active based on the current path.
     * @param {string} linkHref - The href attribute of the navigation link.
     * @param {string} currentPath - The current window pathname.
     * @returns {boolean} - True if the link is active, false otherwise.
     */
    function isLinkActive(linkHref, currentPath) {
        if (linkHref === currentPath) return true;
        // Special handling for grouped URLs or parent-child relationships
        if (linkHref === withdrawalListUrl && (currentPath === withdrawalAccountUrl || currentPath.startsWith(withdrawalListUrl))) return true;
        if (linkHref === myAudiobooksUrl && (currentPath === myAudiobooksUrl || manageAudiobookDetailPattern.test(currentPath) || currentPath === uploadAudiobookUrl )) return true;
        if (linkHref === myEarningsUrl && currentPath === myEarningsUrl) return true;
        // Add more specific conditions if needed
        return false;
    }

    // Highlight active link in the top navigation bar
    topNavLinks.forEach(link => {
        const linkHref = link.getAttribute('href');
        // Reset classes first
        link.classList.remove('active', 'bg-theme-bg-nav-dark-bg-active', 'text-theme-text-nav-dark-bg-active', 'font-semibold');
        link.classList.add('text-theme-text-nav-dark-bg', 'font-medium'); 
        
        if (isLinkActive(linkHref, currentPath)) {
            link.classList.add('active', 'bg-theme-bg-nav-dark-bg-active', 'text-theme-text-nav-dark-bg-active', 'font-semibold');
            link.classList.remove('text-theme-text-nav-dark-bg', 'font-medium');
            activeSet = true;
        }
    });

    // Highlight active link in the mobile navigation menu
    mobileNavLinks.forEach(link => {
        const linkHref = link.getAttribute('href');
        // Reset classes first
        link.classList.remove('active', 'bg-white/10', 'text-white', 'font-semibold'); 
        link.classList.add('text-theme-text-nav-dark-bg', 'font-medium'); 

        if (isLinkActive(linkHref, currentPath)) {
            link.classList.add('active', 'bg-white/10', 'text-white', 'font-semibold');
            link.classList.remove('text-theme-text-nav-dark-bg', 'font-medium');
            // No need to set activeSet here again if topNav already did, but harmless
        }
    });

    // Default to Dashboard if no other link is active and current path is dashboard
    if (!activeSet && currentPath === dashboardUrl) {
        const dashboardLinkDesktop = document.querySelector(`nav .top-nav-link[href="${dashboardUrl}"]`);
        if (dashboardLinkDesktop) {
            dashboardLinkDesktop.classList.add('active', 'bg-theme-bg-nav-dark-bg-active', 'text-theme-text-nav-dark-bg-active', 'font-semibold');
            dashboardLinkDesktop.classList.remove('text-theme-text-nav-dark-bg', 'font-medium');
        }
        const dashboardLinkMobile = document.querySelector(`#mobile-menu a.mobile-nav-link[href="${dashboardUrl}"]`);
        if (dashboardLinkMobile) {
            dashboardLinkMobile.classList.add('active', 'bg-white/10', 'text-white', 'font-semibold');
            dashboardLinkMobile.classList.remove('text-theme-text-nav-dark-bg', 'font-medium');
        }
    }
    
    // Ensure x-cloak is present for Alpine.js transitions on mobile menu
    const mobileMenuDiv = document.getElementById('mobile-menu');
    if (mobileMenuDiv && !mobileMenuDiv.hasAttribute('x-cloak')) {
        mobileMenuDiv.setAttribute('x-cloak', '');
    }
});
