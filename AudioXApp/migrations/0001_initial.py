# Generated by Django 4.2.19 on 2025-06-24 22:13

import AudioXApp.models
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('adminid', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text="Admin's email address", max_length=254, unique=True)),
                ('username', models.CharField(help_text="Admin's username", max_length=255, unique=True)),
                ('password', models.CharField(help_text='Hashed password', max_length=128)),
                ('roles', models.CharField(help_text='Comma-separated list of roles', max_length=512)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this admin account is active')),
                ('last_login', models.DateTimeField(blank=True, help_text='Last login timestamp', null=True)),
            ],
            options={
                'verbose_name': 'Custom Administrator',
                'verbose_name_plural': 'Custom Administrators',
                'db_table': 'ADMINS',
            },
        ),
        migrations.CreateModel(
            name='Audiobook',
            fields=[
                ('audiobook_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the audiobook', max_length=255)),
                ('author', models.CharField(blank=True, help_text='Author of the original work', max_length=255, null=True)),
                ('narrator', models.CharField(blank=True, help_text='Narrator of the audiobook', max_length=255, null=True)),
                ('language', models.CharField(blank=True, help_text='Primary language of the audiobook', max_length=100, null=True)),
                ('duration', models.DurationField(blank=True, help_text='Total duration of the audiobook. Calculated from chapters if possible.', null=True)),
                ('description', models.TextField(help_text='Detailed description of the audiobook.', null=True)),
                ('publish_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Original publication date or date added to platform.')),
                ('genre', models.CharField(blank=True, help_text='Genre classification', max_length=100, null=True)),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier, auto-generated from title.', max_length=255, unique=True)),
                ('cover_image', models.ImageField(blank=True, help_text='Cover image for the audiobook', null=True, upload_to='audiobook_covers/')),
                ('status', models.CharField(choices=[('PUBLISHED', 'Published'), ('INACTIVE', 'Inactive'), ('UNDER_REVIEW', 'Under Review'), ('REJECTED', 'Rejected by Admin'), ('PAUSED_BY_ADMIN', 'Paused by Admin'), ('TAKEDOWN', 'Takedown by Admin')], db_index=True, default='INACTIVE', help_text='Public visibility of the audiobook (e.g., Published, Inactive).', max_length=20)),
                ('moderation_status', models.CharField(choices=[('approved', 'Approved'), ('pending_review', 'Pending Review'), ('needs_review', 'Needs Manual Review'), ('rejected', 'Rejected')], db_index=True, default='pending_review', help_text='Internal status for content moderation.', max_length=20)),
                ('moderation_notes', models.TextField(blank=True, help_text='Internal notes from the moderation process (e.g., why it was flagged or rejected).', null=True)),
                ('last_moderated_at', models.DateTimeField(blank=True, help_text='Timestamp of the last moderation action.', null=True)),
                ('source', models.CharField(choices=[('creator', 'Creator Upload'), ('librivox', 'LibriVox'), ('archive', 'Archive.org')], db_index=True, default='creator', help_text='Source of the audiobook (Creator, LibriVox, Archive.org)', max_length=10)),
                ('is_creator_book', models.BooleanField(default=True, help_text='True if uploaded by a platform creator, False if a placeholder for an external book (e.g., for reviews only).')),
                ('total_views', models.PositiveIntegerField(default=0, help_text='Total number of times the audiobook detail page has been viewed.')),
                ('total_sales', models.PositiveIntegerField(default=0, help_text='Number of times this audiobook has been sold (for paid books).')),
                ('total_revenue_generated', models.DecimalField(decimal_places=2, default=0.0, help_text='Total gross revenue generated by this audiobook before platform fees.', max_digits=12)),
                ('is_paid', models.BooleanField(default=False, help_text='Is this audiobook paid or free?')),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Price in PKR if the audiobook is paid (set to 0.00 if free).', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Timestamp when the audiobook record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the audiobook record was last updated.')),
                ('takedown_at', models.DateTimeField(blank=True, help_text='Timestamp when the audiobook was taken down.', null=True)),
                ('takedown_reason', models.TextField(blank=True, help_text='Reason for the takedown, provided by the admin.', null=True)),
                ('takedown_by', models.ForeignKey(blank=True, help_text='Admin who initiated the takedown', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='takedown_audiobooks', to='AudioXApp.admin')),
            ],
            options={
                'verbose_name': 'Audiobook',
                'verbose_name_plural': 'Audiobooks',
                'db_table': 'AUDIOBOOKS',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AudiobookPurchase',
            fields=[
                ('purchase_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('purchase_date', models.DateTimeField(auto_now_add=True, help_text='When the purchase was made')),
                ('amount_paid', models.DecimalField(decimal_places=2, help_text='Total amount paid by the user in PKR.', max_digits=10)),
                ('platform_fee_percentage', models.DecimalField(decimal_places=2, default=Decimal('10.00'), help_text='Platform fee percentage at the time of purchase.', max_digits=5)),
                ('platform_fee_amount', models.DecimalField(decimal_places=2, help_text='Calculated platform fee in PKR.', max_digits=10)),
                ('creator_share_amount', models.DecimalField(decimal_places=2, help_text='Amount credited to the creator in PKR.', max_digits=10)),
                ('stripe_checkout_session_id', models.CharField(blank=True, db_index=True, help_text='Stripe Checkout Session ID for reference.', max_length=255, null=True)),
                ('stripe_payment_intent_id', models.CharField(blank=True, db_index=True, help_text='Stripe Payment Intent ID for reference.', max_length=255, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded')], default='PENDING', help_text='Current status of the purchase', max_length=10)),
                ('audiobook', models.ForeignKey(help_text='Audiobook that was purchased', on_delete=django.db.models.deletion.CASCADE, related_name='audiobook_sales', to='AudioXApp.audiobook')),
            ],
            options={
                'verbose_name': 'Audiobook Purchase',
                'verbose_name_plural': 'Audiobook Purchases',
                'db_table': 'AUDIOBOOK_PURCHASES',
                'ordering': ['-purchase_date'],
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('chapter_id', models.AutoField(primary_key=True, serialize=False)),
                ('chapter_name', models.CharField(help_text='Name/title of the chapter', max_length=255)),
                ('chapter_order', models.PositiveIntegerField(help_text='Order of this chapter within the audiobook')),
                ('audio_file', models.FileField(blank=True, help_text='Uploaded audio file for this chapter', null=True, upload_to='chapters_audio/')),
                ('external_audio_url', models.URLField(blank=True, help_text='External URL for audio content', max_length=1024, null=True)),
                ('external_chapter_identifier', models.CharField(blank=True, help_text='Unique identifier for external chapters', max_length=255, null=True, unique=True)),
                ('duration_seconds', models.FloatField(blank=True, help_text='Duration of the chapter in seconds', null=True)),
                ('size_bytes', models.PositiveBigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('text_content', models.TextField(blank=True, help_text='Text content of the chapter', null=True)),
                ('transcript', models.TextField(blank=True, help_text='Audio transcript', null=True)),
                ('moderation_status', models.CharField(choices=[('approved', 'Approved'), ('pending_review', 'Pending Review'), ('needs_review', 'Needs Manual Review'), ('rejected', 'Rejected')], db_index=True, default='pending_review', help_text='Internal moderation status', max_length=20)),
                ('moderation_notes', models.TextField(blank=True, help_text='Internal moderation notes', null=True)),
                ('is_tts_generated', models.BooleanField(default=False, help_text='Whether this chapter was generated using TTS')),
                ('tts_voice_id', models.CharField(blank=True, help_text='Voice ID used for TTS generation', max_length=100, null=True)),
                ('source_document_filename', models.CharField(blank=True, help_text='Original document filename if converted from text', max_length=255, null=True)),
                ('is_preview_eligible', models.BooleanField(default=False, help_text='Whether this chapter can be used for previews')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('audiobook', models.ForeignKey(help_text='Audiobook this chapter belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='AudioXApp.audiobook')),
            ],
            options={
                'verbose_name': 'Chapter',
                'verbose_name_plural': 'Chapters',
                'db_table': 'CHAPTERS',
                'ordering': ['audiobook', 'chapter_order'],
            },
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('room_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the chat room.', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Description for the chat room.')),
                ('cover_image', models.ImageField(blank=True, help_text='Optional cover image for the room.', null=True, upload_to=AudioXApp.models.chatroom_cover_image_path)),
                ('language', models.CharField(choices=[('EN', 'English'), ('UR', 'Urdu'), ('PA', 'Punjabi'), ('SI', 'Sindhi')], default='EN', help_text='Primary language of the chat room.', max_length=2)),
                ('status', models.CharField(choices=[('active', 'Active'), ('closed', 'Closed by Owner')], db_index=True, default='active', help_text='The current status of the chat room (Active, Closed, etc.)', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Chat Room',
                'verbose_name_plural': 'Chat Rooms',
                'db_table': 'CHAT_ROOMS',
                'ordering': ['-created_at', 'status'],
            },
        ),
        migrations.CreateModel(
            name='CoinPack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Display name for the coin pack', max_length=100)),
                ('coins', models.PositiveIntegerField(help_text='Base number of coins in this pack')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price of the coin pack in PKR', max_digits=10)),
                ('bonus_coins', models.PositiveIntegerField(default=0, help_text='Additional bonus coins included')),
                ('is_popular', models.BooleanField(default=False, help_text='Mark this pack as popular for UI highlighting')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this pack is available for purchase')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Coin Pack',
                'verbose_name_plural': 'Coin Packs',
                'db_table': 'COIN_PACKS',
                'ordering': ['price'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ticket_display_id', models.CharField(editable=False, help_text='User-friendly ticket ID, e.g., AXT-1001', max_length=20, unique=True)),
                ('subject', models.CharField(max_length=255, verbose_name='Subject')),
                ('description', models.TextField(verbose_name='Description')),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('PROCESSING', 'Processing'), ('AWAITING_USER', 'Awaiting User Response'), ('RESOLVED', 'Resolved'), ('CLOSED', 'Closed'), ('REOPENED', 'Reopened')], default='OPEN', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated At')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='Timestamp when the ticket was first marked as resolved.', null=True, verbose_name='Resolved At')),
                ('closed_at', models.DateTimeField(blank=True, help_text='Timestamp when the ticket was finally closed (e.g., after a resolved period).', null=True, verbose_name='Closed At')),
                ('assigned_admin_identifier', models.CharField(blank=True, help_text='Identifier (e.g., username or ID) of the admin handling the ticket from your custom Admin system.', max_length=255, null=True, verbose_name='Assigned Admin Identifier')),
            ],
            options={
                'verbose_name': 'Support Ticket',
                'verbose_name_plural': 'Support Tickets',
                'db_table': 'SUPPORT_TICKETS',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description', null=True)),
                ('is_creator_specific', models.BooleanField(default=False, help_text='Is this category primarily for creators?')),
            ],
            options={
                'verbose_name': 'Ticket Category',
                'verbose_name_plural': 'Ticket Categories',
                'db_table': 'TICKET_CATEGORIES',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserLibraryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('audiobook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_by_users', to='AudioXApp.audiobook')),
            ],
            options={
                'verbose_name': 'User Library Item',
                'verbose_name_plural': 'User Library Items',
                'db_table': 'USER_LIBRARY_ITEMS',
                'ordering': ['-added_at'],
            },
        ),
        migrations.CreateModel(
            name='WithdrawalAccount',
            fields=[
                ('account_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('account_type', models.CharField(choices=[('bank', 'Bank Account'), ('jazzcash', 'JazzCash'), ('easypaisa', 'Easypaisa'), ('nayapay', 'Nayapay'), ('upaisa', 'Upaisa')], max_length=20)),
                ('account_title', models.CharField(help_text='Full name registered with the account.', max_length=100)),
                ('account_identifier', models.CharField(help_text='Account Number (JazzCash/Easypaisa/Nayapay/Upaisa) or IBAN (Bank Account).', max_length=34)),
                ('bank_name', models.CharField(blank=True, help_text="Required only if Account Type is 'Bank Account'.", max_length=100, null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Mark one account as primary for withdrawals.')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='Timestamp when this account was last used for a withdrawal.', null=True)),
            ],
            options={
                'verbose_name': 'Withdrawal Account',
                'verbose_name_plural': 'Withdrawal Accounts',
                'db_table': 'WITHDRAWAL_ACCOUNTS',
                'ordering': ['creator', '-added_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('user_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(help_text="User's full name", max_length=255)),
                ('username', models.CharField(help_text='Unique username for the user', max_length=255, unique=True)),
                ('email', models.EmailField(help_text="User's email address (used for login)", max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, default=None, help_text="User's phone number (optional)", max_length=20, null=True)),
                ('bio', models.TextField(blank=True, default=None, help_text="User's biography (optional)", null=True)),
                ('profile_pic', models.ImageField(blank=True, help_text="User's profile picture", null=True, upload_to='profile_pics/')),
                ('subscription_type', models.CharField(choices=[('FR', 'Free'), ('PR', 'Premium')], default='FR', help_text="User's subscription tier", max_length=2)),
                ('coins', models.IntegerField(default=0, help_text="User's current coin balance")),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Date when the user account was created')),
                ('is_2fa_enabled', models.BooleanField(default=False, help_text='Whether two-factor authentication is enabled', verbose_name='2FA Enabled')),
                ('is_banned_by_admin', models.BooleanField(default=False, help_text='Set to true if the user is banned from the entire platform by an admin.')),
                ('platform_ban_reason', models.TextField(blank=True, help_text='Reason provided by admin if the user is banned from the platform.', null=True)),
                ('platform_banned_at', models.DateTimeField(blank=True, help_text='Timestamp when the user was banned from the platform.', null=True)),
                ('requires_extra_details_post_social_signup', models.BooleanField(default=False, help_text='True if user signed up via social media and needs to provide phone number and confirm/edit full name.')),
                ('monthly_document_conversions', models.PositiveIntegerField(default=0, help_text='Number of document-to-audio conversions used this month')),
                ('last_document_conversion_reset', models.DateTimeField(default=django.utils.timezone.now, help_text='Last time the document conversion counter was reset')),
                ('monthly_coin_gifts', models.PositiveIntegerField(default=0, help_text='Number of coin gifts sent this month')),
                ('last_coin_gift_reset', models.DateTimeField(default=django.utils.timezone.now, help_text='Last time the coin gift counter was reset')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('library_audiobooks', models.ManyToManyField(blank=True, related_name='saved_in_libraries', through='AudioXApp.UserLibraryItem', to='AudioXApp.audiobook')),
                ('platform_banned_by', models.ForeignKey(blank=True, help_text='Admin who banned this user from the platform.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='platform_banned_users', to='AudioXApp.admin')),
                ('purchased_audiobooks', models.ManyToManyField(related_name='purchased_by_users', through='AudioXApp.AudiobookPurchase', to='AudioXApp.audiobook')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'USERS',
            },
        ),
        migrations.CreateModel(
            name='Creator',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='creator_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('cid', models.CharField(blank=True, db_index=True, help_text='Unique Creator ID, generated upon approval.', max_length=100, null=True, unique=True)),
                ('creator_name', models.CharField(help_text='Public display name for the creator', max_length=100)),
                ('creator_unique_name', models.CharField(help_text='Unique handle (@yourname) for URLs and mentions', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_creator_unique_name', message='Unique name can only contain letters, numbers, and underscores.', regex='^[a-zA-Z0-9_]+$')])),
                ('creator_profile_pic', models.ImageField(blank=True, help_text='Optional: Specific profile picture for the creator page.', null=True, upload_to=AudioXApp.models.creator_profile_pic_path)),
                ('total_earning', models.DecimalField(decimal_places=2, default=0.0, help_text='Total gross earnings from sales before platform fees.', max_digits=12)),
                ('available_balance', models.DecimalField(decimal_places=2, default=0.0, help_text='Net earnings available for withdrawal after platform fees.', max_digits=12)),
                ('cnic_front', models.ImageField(help_text='Front side of CNIC', null=True, upload_to=AudioXApp.models.creator_cnic_path)),
                ('cnic_back', models.ImageField(help_text='Back side of CNIC', null=True, upload_to=AudioXApp.models.creator_cnic_path)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending Verification'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('terms_accepted_at', models.DateTimeField(blank=True, help_text='Timestamp when creator terms were accepted during the last application', null=True)),
                ('is_banned', models.BooleanField(db_index=True, default=False, help_text='Is this creator currently banned?')),
                ('ban_reason', models.TextField(blank=True, help_text='Reason provided by admin if creator is banned.', null=True)),
                ('banned_at', models.DateTimeField(blank=True, help_text='Timestamp when the creator was banned.', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason provided by admin if the LATEST application is rejected', null=True)),
                ('last_application_date', models.DateTimeField(blank=True, help_text='Timestamp of the most recent application submission', null=True)),
                ('application_attempts_current_month', models.PositiveIntegerField(default=0, help_text='Number of applications submitted in the current cycle (resets monthly based on last_application_date)')),
                ('approved_at', models.DateTimeField(blank=True, help_text='Timestamp when the application was approved.', null=True)),
                ('attempts_at_approval', models.PositiveIntegerField(blank=True, help_text='Number of attempts made when this application was approved.', null=True)),
                ('welcome_popup_shown', models.BooleanField(default=False, help_text="Has the 'Welcome Creator' popup been shown?")),
                ('rejection_popup_shown', models.BooleanField(default=False, help_text="Has the 'Application Rejected' popup been shown?")),
                ('admin_notes', models.TextField(blank=True, help_text='Internal notes for admins regarding this creator.', null=True)),
                ('last_name_change_date', models.DateTimeField(blank=True, help_text='Timestamp of the last display name change.', null=True)),
                ('last_unique_name_change_date', models.DateTimeField(blank=True, help_text='Timestamp of the last unique name (@handle) change.', null=True)),
                ('last_withdrawal_request_date', models.DateTimeField(blank=True, help_text='Timestamp of the last non-cancelled withdrawal request.', null=True)),
                ('profile_pic_updated_at', models.DateTimeField(blank=True, help_text='Timestamp of the last profile picture update.', null=True)),
                ('approved_by', models.ForeignKey(blank=True, help_text='Admin who approved this application.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_creators', to='AudioXApp.admin')),
                ('banned_by', models.ForeignKey(blank=True, help_text='Admin who banned this creator.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='banned_creators', to='AudioXApp.admin')),
            ],
            options={
                'verbose_name': 'Creator',
                'verbose_name_plural': 'Creators',
                'db_table': 'CREATORS',
            },
        ),
        migrations.AddField(
            model_name='userlibraryitem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='library_items', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TicketMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(verbose_name='Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('is_admin_reply', models.BooleanField(default=False, help_text='True if this message is from an admin/support agent.', verbose_name='Is Admin Reply')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='AudioXApp.ticket', verbose_name='Ticket')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ticket_messages', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Support Ticket Message',
                'verbose_name_plural': 'Support Ticket Messages',
                'db_table': 'SUPPORT_TICKET_MESSAGES',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='AudioXApp.ticketcategory', verbose_name='Category'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan', models.CharField(choices=[('monthly', 'Monthly Premium'), ('annual', 'Annual Premium')], help_text='Subscription plan type', max_length=20)),
                ('start_date', models.DateTimeField(help_text='When the subscription started')),
                ('end_date', models.DateTimeField(blank=True, help_text="End of the current billing cycle. For 'canceled' status, this is when access ends.", null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('canceled', 'Canceled'), ('expired', 'Expired'), ('pending', 'Pending Payment'), ('failed', 'Payment Failed'), ('past_due', 'Past Due')], db_index=True, default='active', max_length=10)),
                ('stripe_subscription_id', models.CharField(blank=True, db_index=True, help_text='Stripe subscription ID', max_length=255, null=True)),
                ('stripe_customer_id', models.CharField(blank=True, db_index=True, help_text='Stripe customer ID', max_length=255, null=True)),
                ('stripe_payment_method_brand', models.CharField(blank=True, help_text='e.g., visa, mastercard', max_length=50, null=True)),
                ('stripe_payment_method_last4', models.CharField(blank=True, help_text='Last 4 digits of the card', max_length=4, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'db_table': 'SUBSCRIPTIONS',
            },
        ),
        migrations.CreateModel(
            name='CoinTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('purchase', 'Purchase'), ('reward', 'Reward'), ('spent', 'Spent'), ('refund', 'Refund'), ('gift_sent', 'Gift Sent'), ('gift_received', 'Gift Received'), ('withdrawal', 'Withdrawal'), ('withdrawal_fee', 'Withdrawal Fee'), ('audiobook_purchase', 'Audiobook Purchase')], help_text='Type of coin transaction', max_length=20)),
                ('amount', models.IntegerField(help_text='Amount of coins (positive for credit, negative for debit)')),
                ('transaction_date', models.DateTimeField(auto_now_add=True, help_text='When the transaction occurred')),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('pending', 'Pending'), ('failed', 'Failed'), ('processing', 'Processing'), ('rejected', 'Rejected')], default='pending', help_text='Current status of the transaction', max_length=10)),
                ('pack_name', models.CharField(blank=True, help_text='Name of coin pack if this was a purchase', max_length=255, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Price paid in PKR for coin purchases', max_digits=10, null=True)),
                ('description', models.TextField(blank=True, help_text='Additional description or notes', null=True)),
                ('recipient', models.ForeignKey(blank=True, help_text='User who received the gift (for gift transactions)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gifts_received', to=settings.AUTH_USER_MODEL)),
                ('related_audiobook', models.ForeignKey(blank=True, help_text='Audiobook purchased with coins', null=True, on_delete=django.db.models.deletion.SET_NULL, to='AudioXApp.audiobook')),
                ('sender', models.ForeignKey(blank=True, help_text='User who sent the gift (for gift transactions)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gifts_sent', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User who performed the transaction', on_delete=django.db.models.deletion.CASCADE, related_name='coin_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Coin Transaction',
                'verbose_name_plural': 'Coin Transactions',
                'db_table': 'COIN_TRANSACTIONS',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='ChatRoomInvitation',
            fields=[
                ('invitation_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], db_index=True, default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('invited_by', models.ForeignKey(help_text='User who sent the invitation.', on_delete=django.db.models.deletion.CASCADE, related_name='sent_chat_invitations', to=settings.AUTH_USER_MODEL)),
                ('invited_user', models.ForeignKey(help_text='User who is invited to the room.', on_delete=django.db.models.deletion.CASCADE, related_name='received_chat_invitations', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='AudioXApp.chatroom')),
            ],
            options={
                'verbose_name': 'Chat Room Invitation',
                'verbose_name_plural': 'Chat Room Invitations',
                'db_table': 'CHAT_ROOM_INVITATIONS',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='chatroom',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The user who created and owns the room.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_chatrooms', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('message_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('audiobook_recommendation', 'Audiobook Recommendation'), ('user_joined', 'User Joined Notification'), ('user_left', 'User Left Notification'), ('room_created', 'Room Created Notification'), ('room_renamed', 'Room Renamed Notification'), ('room_closed', 'Room Closed Notification')], default='text', max_length=30)),
                ('content', models.TextField(help_text='Content of the message. For recommendations, this might be an optional comment or the system message text.')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('recommended_audiobook', models.ForeignKey(blank=True, help_text='Link to an audiobook if this message is a recommendation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_recommendations', to='AudioXApp.audiobook')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='AudioXApp.chatroom')),
                ('user', models.ForeignKey(blank=True, help_text='User who sent the message. Null for system messages.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chat Message',
                'verbose_name_plural': 'Chat Messages',
                'db_table': 'CHAT_MESSAGES',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ChapterUnlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coins_spent', models.PositiveIntegerField(default=50, help_text='Number of coins spent to unlock this chapter')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True, help_text='When the chapter was unlocked')),
                ('chapter', models.ForeignKey(help_text='Chapter that was unlocked', on_delete=django.db.models.deletion.CASCADE, related_name='user_unlocks', to='AudioXApp.chapter')),
                ('user', models.ForeignKey(help_text='User who unlocked the chapter', on_delete=django.db.models.deletion.CASCADE, related_name='chapter_unlocks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chapter Unlock',
                'verbose_name_plural': 'Chapter Unlocks',
                'db_table': 'CHAPTER_UNLOCKS',
            },
        ),
        migrations.CreateModel(
            name='BannedKeyword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(help_text='The word or phrase to be flagged. Case-insensitive.', max_length=100, unique=True)),
                ('language', models.CharField(choices=[('en', 'English'), ('ur', 'Urdu'), ('pa', 'Punjabi'), ('sd', 'Sindhi')], db_index=True, max_length=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='added_keywords', to='AudioXApp.admin')),
            ],
            options={
                'verbose_name': 'Banned Keyword',
                'verbose_name_plural': 'Banned Keywords',
                'db_table': 'BANNED_KEYWORDS',
                'ordering': ['language', 'keyword'],
            },
        ),
        migrations.CreateModel(
            name='AudiobookViewLog',
            fields=[
                ('view_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('viewed_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('audiobook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_logs', to='AudioXApp.audiobook')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audiobook_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audiobook View Log',
                'verbose_name_plural': 'Audiobook View Logs',
                'db_table': 'AUDIOBOOK_VIEW_LOGS',
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.AddField(
            model_name='audiobookpurchase',
            name='user',
            field=models.ForeignKey(help_text='User who made the purchase', on_delete=django.db.models.deletion.CASCADE, related_name='audiobook_purchases', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='WithdrawalRequest',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('old_request_id', models.CharField(blank=True, help_text='Legacy request ID, if applicable.', max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount requested for withdrawal in PKR', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('PROCESSING', 'Processing Payment'), ('COMPLETED', 'Payment Completed'), ('REJECTED', 'Rejected by Admin'), ('FAILED', 'Payment Failed')], db_index=True, default='PENDING', max_length=25)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('processed_date', models.DateTimeField(blank=True, help_text='Timestamp when request was Approved or Rejected by admin', null=True)),
                ('admin_notes', models.TextField(blank=True, help_text='Reason for rejection, or other admin notes. Visible to creator.', null=True)),
                ('payment_slip', models.ImageField(blank=True, help_text='Payment slip uploaded by admin upon approval.', null=True, upload_to=AudioXApp.models.withdrawal_payment_slip_path)),
                ('payment_reference', models.CharField(blank=True, help_text='Payment transaction reference, if any.', max_length=255, null=True)),
                ('processed_by', models.ForeignKey(blank=True, help_text='Admin who last updated the status (approved/rejected/marked processing)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_withdrawals', to='AudioXApp.admin')),
                ('withdrawal_account', models.ForeignKey(help_text='The account selected for this withdrawal request.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='withdrawal_requests', to='AudioXApp.withdrawalaccount')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_requests', to='AudioXApp.creator')),
            ],
            options={
                'verbose_name': 'Withdrawal Request',
                'verbose_name_plural': 'Withdrawal Requests',
                'db_table': 'WITHDRAWAL_REQUESTS',
                'ordering': ['-request_date'],
            },
        ),
        migrations.AddField(
            model_name='withdrawalaccount',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='withdrawal_accounts', to='AudioXApp.creator'),
        ),
        migrations.AlterUniqueTogether(
            name='userlibraryitem',
            unique_together={('user', 'audiobook')},
        ),
        migrations.CreateModel(
            name='UserDownloadedAudiobook',
            fields=[
                ('download_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('download_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Download Date')),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Optional: When the download access expires (e.g., for subscription-based downloads).', null=True, verbose_name='Expiry Date')),
                ('is_active', models.BooleanField(default=True, help_text='Is this download currently active and usable offline? Set to False if expired or revoked.', verbose_name='Is Active')),
                ('last_verified_at', models.DateTimeField(blank=True, help_text="Timestamp when the client app last verified the download's validity with the server.", null=True, verbose_name='Last Verified At')),
                ('audiobook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_downloads', to='AudioXApp.audiobook', verbose_name='Audiobook')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloaded_audiobooks', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Downloaded Audiobook',
                'verbose_name_plural': 'User Downloaded Audiobooks',
                'db_table': 'USER_DOWNLOADED_AUDIOBOOKS',
                'ordering': ['-download_date'],
                'unique_together': {('user', 'audiobook')},
            },
        ),
        migrations.AddField(
            model_name='ticket',
            name='creator_profile',
            field=models.ForeignKey(blank=True, help_text='Associated creator profile, if the user is a creator and the issue is creator-specific.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_support_tickets', to='AudioXApp.creator', verbose_name='Creator Profile'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.AutoField(primary_key=True, serialize=False)),
                ('rating', models.PositiveIntegerField(help_text='Rating from 1 to 5 stars.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text="User's review comment (optional).", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('audiobook', models.ForeignKey(help_text='Audiobook being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='AudioXApp.audiobook')),
                ('user', models.ForeignKey(help_text='User who wrote the review', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audiobook Review',
                'verbose_name_plural': 'Audiobook Reviews',
                'db_table': 'REVIEWS',
                'ordering': ['-created_at'],
                'unique_together': {('audiobook', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ListeningHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_position_seconds', models.FloatField(default=0, help_text='The last position in seconds the user was at in this specific chapter.')),
                ('is_completed', models.BooleanField(default=False, help_text='True if the user has finished this chapter.')),
                ('last_listened_at', models.DateTimeField(auto_now=True)),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listening_sessions', to='AudioXApp.chapter')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listening_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chapter Listening History',
                'verbose_name_plural': 'Chapter Listening Histories',
                'db_table': 'LISTENING_HISTORY_CHAPTER',
                'ordering': ['-last_listened_at'],
                'unique_together': {('user', 'chapter')},
            },
        ),
        migrations.CreateModel(
            name='CreatorEarning',
            fields=[
                ('earning_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('earning_type', models.CharField(choices=[('sale', 'Sale Earning'), ('view', 'View Earning'), ('bonus', 'Bonus'), ('adjustment', 'Adjustment')], db_index=True, default='sale', max_length=10)),
                ('amount_earned', models.DecimalField(decimal_places=2, help_text='Net amount earned by the creator for this transaction.', max_digits=10)),
                ('transaction_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('view_count_for_earning', models.PositiveIntegerField(blank=True, help_text="Number of views this earning entry represents, if type is 'view'.", null=True)),
                ('earning_per_view_at_transaction', models.DecimalField(blank=True, decimal_places=4, help_text="Earning rate per view at the time of this transaction, if type is 'view'.", max_digits=6, null=True)),
                ('notes', models.TextField(blank=True, help_text='Any notes related to this earning, e.g., reason for adjustment or bonus.', null=True)),
                ('audiobook_title_at_transaction', models.CharField(blank=True, help_text='Title of the audiobook at the time of the transaction (denormalized).', max_length=255, null=True)),
                ('audiobook', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='earning_entries', to='AudioXApp.audiobook')),
                ('purchase', models.OneToOneField(blank=True, help_text='Link to the specific purchase if this earning is from a sale.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='earning_record', to='AudioXApp.audiobookpurchase')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earnings_log', to='AudioXApp.creator')),
            ],
            options={
                'verbose_name': 'Creator Earning',
                'verbose_name_plural': 'Creator Earnings',
                'db_table': 'CREATOR_EARNINGS',
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='CreatorApplicationLog',
            fields=[
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('application_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp when this specific application was submitted')),
                ('attempt_number_monthly', models.PositiveIntegerField(help_text='Which attempt this was in the submission month (at the time of submission)')),
                ('creator_name_submitted', models.CharField(max_length=100)),
                ('creator_unique_name_submitted', models.CharField(max_length=50)),
                ('cnic_front_submitted', models.ImageField(blank=True, help_text='CNIC Front submitted for this attempt', null=True, upload_to=AudioXApp.models.creator_cnic_path)),
                ('cnic_back_submitted', models.ImageField(blank=True, help_text='CNIC Back submitted for this attempt', null=True, upload_to=AudioXApp.models.creator_cnic_path)),
                ('terms_accepted_at_submission', models.DateTimeField(help_text='Timestamp when terms were accepted for this submission')),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected')], db_index=True, default='submitted', max_length=10)),
                ('processed_at', models.DateTimeField(blank=True, help_text='Timestamp when the application was approved or rejected', null=True)),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason provided if this specific application was rejected', null=True)),
                ('processed_by', models.ForeignKey(blank=True, help_text='Admin who approved or rejected this specific application.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_creator_applications', to='AudioXApp.admin')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='application_logs', to='AudioXApp.creator')),
            ],
            options={
                'verbose_name': 'Creator Application Log',
                'verbose_name_plural': 'Creator Application Logs',
                'db_table': 'CREATOR_APPLICATION_LOGS',
                'ordering': ['creator', '-application_date'],
            },
        ),
        migrations.CreateModel(
            name='ContentReport',
            fields=[
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(choices=[('HATE_SPEECH', 'Hate Speech'), ('ABUSIVE_CONTENT', 'Abusive or Harassing Content'), ('VIOLENT_CONTENT', 'Violent or Graphic Content'), ('COPYRIGHT', 'Copyright Infringement'), ('MISINFORMATION', 'Misinformation or Spam'), ('OTHER', 'Other Issue')], max_length=30)),
                ('details', models.TextField(blank=True, help_text='Additional details provided by the user.')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('is_resolved', models.BooleanField(default=False, help_text='Has an admin reviewed and resolved this report?')),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('audiobook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='AudioXApp.audiobook')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_reports', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_content_reports', to='AudioXApp.admin')),
            ],
            options={
                'verbose_name': 'Content Report',
                'verbose_name_plural': 'Content Reports',
                'db_table': 'CONTENT_REPORTS',
                'ordering': ['-created_at'],
                'unique_together': {('reported_by', 'audiobook')},
            },
        ),
        migrations.CreateModel(
            name='CoinPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coins_spent', models.PositiveIntegerField(help_text='Number of coins spent on this purchase')),
                ('purchase_date', models.DateTimeField(auto_now_add=True, help_text='When the purchase was made')),
                ('creator_earning', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount credited to creator', max_digits=10)),
                ('platform_commission', models.DecimalField(decimal_places=2, default=0.0, help_text='Platform commission from this purchase', max_digits=10)),
                ('audiobook', models.ForeignKey(help_text='Audiobook that was purchased', on_delete=django.db.models.deletion.CASCADE, related_name='coin_purchases', to='AudioXApp.audiobook')),
                ('user', models.ForeignKey(help_text='User who made the purchase', on_delete=django.db.models.deletion.CASCADE, related_name='coin_purchases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Coin Purchase',
                'verbose_name_plural': 'Coin Purchases',
                'db_table': 'COIN_PURCHASES',
                'unique_together': {('user', 'audiobook')},
            },
        ),
        migrations.CreateModel(
            name='ChatRoomMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('member', 'Member'), ('admin', 'Admin')], default='member', max_length=10)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('left', 'Left Voluntarily'), ('room_dismissed', 'Room Dismissed')], db_index=True, default='active', help_text='Current status of the member in the room.', max_length=20)),
                ('left_at', models.DateTimeField(blank=True, help_text='Timestamp when the user left or was removed from the room.', null=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_memberships', to='AudioXApp.chatroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_room_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chat Room Member',
                'verbose_name_plural': 'Chat Room Members',
                'db_table': 'CHAT_ROOM_MEMBERS',
                'ordering': ['room', 'joined_at'],
                'unique_together': {('room', 'user')},
            },
        ),
        migrations.AddConstraint(
            model_name='chatroominvitation',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'pending')), fields=('room', 'invited_user'), name='unique_pending_invitation_per_user_per_room'),
        ),
        migrations.AlterUniqueTogether(
            name='chapterunlock',
            unique_together={('user', 'chapter')},
        ),
        migrations.AlterUniqueTogether(
            name='chapter',
            unique_together={('audiobook', 'chapter_order')},
        ),
        migrations.AddIndex(
            model_name='audiobookviewlog',
            index=models.Index(fields=['audiobook', 'viewed_at'], name='AUDIOBOOK_V_audiobo_0ca16b_idx'),
        ),
        migrations.AddIndex(
            model_name='audiobookviewlog',
            index=models.Index(fields=['user', 'audiobook', 'viewed_at'], name='AUDIOBOOK_V_user_id_182167_idx'),
        ),
        migrations.AddConstraint(
            model_name='audiobookpurchase',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'COMPLETED')), fields=('user', 'audiobook'), name='unique_completed_purchase_per_user_audiobook'),
        ),
        migrations.AddField(
            model_name='audiobook',
            name='creator',
            field=models.ForeignKey(blank=True, help_text='Creator who uploaded this audiobook', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audiobooks', to='AudioXApp.creator'),
        ),
        migrations.AddConstraint(
            model_name='withdrawalaccount',
            constraint=models.UniqueConstraint(condition=models.Q(('is_primary', True)), fields=('creator',), name='unique_primary_withdrawal_account_per_creator'),
        ),
    ]
